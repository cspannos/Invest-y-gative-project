{"ast":null,"code":"import _regeneratorRuntime from \"/home/shevek/Documents/blockchain/Invest-y-gative/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/shevek/Documents/blockchain/Invest-y-gative/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/shevek/Documents/blockchain/Invest-y-gative/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/shevek/Documents/blockchain/Invest-y-gative/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/shevek/Documents/blockchain/Invest-y-gative/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/shevek/Documents/blockchain/Invest-y-gative/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/shevek/Documents/blockchain/Invest-y-gative/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/shevek/Documents/blockchain/Invest-y-gative/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/shevek/Documents/blockchain/Invest-y-gative/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport NotaryContract from \"./contracts/SourceMaterial.json\";\nimport getWeb3 from \"./utils/getWeb3\";\nimport ipfs from \"./ipfs\";\nimport storehash from \"./storehash\";\nimport \"./App.css\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.componentDidMount =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var web3, accounts, networkId, deployedNetwork, instance;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return getWeb3();\n\n            case 3:\n              web3 = _context.sent;\n              _context.next = 6;\n              return web3.eth.getAccounts();\n\n            case 6:\n              accounts = _context.sent;\n              _context.next = 9;\n              return web3.eth.net.getId();\n\n            case 9:\n              networkId = _context.sent;\n              deployedNetwork = NotaryContract.networks[networkId];\n              instance = new web3.eth.Contract(NotaryContract.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts and contract to the state, and then proceed with an\n              // example of interacting with the contract's methods.\n\n              _this.setState({\n                web3: web3,\n                accounts: accounts,\n                contract: instance\n              }, _this.runExample);\n\n              _context.next = 19;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](0);\n              // Catch any errors for any of the above operations.\n              alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n              console.log(_context.t0);\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 15]]);\n    }));\n\n    _this.captureFile = function (event) {\n      event.stopPropagation();\n      event.preventDefault();\n      var file = event.target.files[0];\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = function () {\n        return _this.convertToBuffer(reader);\n      };\n    };\n\n    _this.convertToBuffer =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(reader) {\n        var buffer;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return Buffer.from(reader.result);\n\n              case 2:\n                buffer = _context2.sent;\n\n                //set this buffer -using es6 syntax\n                _this.setState({\n                  buffer: buffer\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.onClick =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var web3;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return getWeb3();\n\n            case 2:\n              web3 = _context3.sent;\n              _context3.prev = 3;\n\n              _this.setState({\n                blockNumber: \"waiting..\"\n              });\n\n              _this.setState({\n                gasUsed: \"waiting...\"\n              }); // get Transaction Receipt in console on click.\n              // See: https://web3js.readthedocs.io/en/1.0/web3-eth.html#gettransactionreceipt\n\n\n              _context3.next = 8;\n              return web3.eth.getTransactionReceipt(_this.state.transactionHash, function (err, txReceipt) {\n                console.log(err, txReceipt);\n\n                _this.setState({\n                  txReceipt: txReceipt\n                });\n              });\n\n            case 8:\n              _context3.next = 10;\n              return _this.setState({\n                blockNumber: _this.state.txReceipt.blockNumber\n              });\n\n            case 10:\n              _context3.next = 12;\n              return _this.setState({\n                gasUsed: _this.state.txReceipt.gasUsed\n              });\n\n            case 12:\n              _context3.next = 17;\n              break;\n\n            case 14:\n              _context3.prev = 14;\n              _context3.t0 = _context3[\"catch\"](3);\n              console.log(_context3.t0);\n\n            case 17:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[3, 14]]);\n    }));\n\n    _this.onIPFSSubmit =\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(event) {\n        var web3, accounts;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                event.preventDefault(); //save document to IPFS,return its hash#, and set hash# to state\n                //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add\n\n                _context4.next = 3;\n                return ipfs.add(_this.state.buffer, function (err, ipfsHash) {\n                  console.log(err, ipfsHash); //setState by setting ipfsHash to ipfsHash[0].hash\n\n                  _this.setState({\n                    ipfsHash: ipfsHash[0].hash\n                  });\n                });\n\n              case 3:\n                _context4.next = 5;\n                return getWeb3();\n\n              case 5:\n                web3 = _context4.sent;\n                _context4.next = 8;\n                return web3.eth.getAccounts();\n\n              case 8:\n                accounts = _context4.sent;\n                console.log('Sending from Metamask account: ' + accounts[0]); // call Ethereum contract method \"setHash\" and .send IPFS hash to etheruem contract\n                //return the transaction hash from the ethereum contract\n                //see, this https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-send\n\n                storehash.methods.setHash(_this.state.ipfsHash).send({\n                  from: accounts[0]\n                }, function (error, transactionHash) {\n                  console.log(transactionHash);\n\n                  _this.setState({\n                    transactionHash: transactionHash\n                  });\n                }); //storehash\n\n              case 11:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x2) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    _this.state = {\n      ipfsHash: null,\n      web3: null,\n      accounts: null,\n      contract: null,\n      receivedIPFS: \"\",\n      buffer: \"\",\n      formIPFS: \"\",\n      formAddress: \"\",\n      ethAddress: \"\",\n      blockNumber: \"\",\n      gasUsed: \"\",\n      txReceipt: \"\"\n    };\n    _this.handleChangeAddress = _this.handleChangeAddress.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleChangeIPFS = _this.handleChangeIPFS.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSendIPFS = _this.handleSendIPFS.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleReceiveIPFS = _this.handleReceiveIPFS.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"handleChangeAddress\",\n    // BELOW ADDED\n    value: function handleChangeAddress(event) {\n      this.setState({\n        formAddress: event.target.value\n      });\n    }\n  }, {\n    key: \"handleChangeIPFS\",\n    value: function handleChangeIPFS(event) {\n      this.setState({\n        formIPFS: event.target.value\n      });\n    }\n  }, {\n    key: \"handleSendIPFS\",\n    value: function handleSendIPFS(event) {\n      var _this2 = this;\n\n      event.preventDefault();\n      var contract = this.state.contract;\n      var account = this.state.accounts[0];\n      document.getElementById('new-notification-form').reset();\n      this.setState({\n        showNotification: true\n      });\n      contract.sendIPFS(this.state.formAddress, this.state.formIPFS, {\n        from: account\n      }).then(function (result) {\n        _this2.setState({\n          formAddress: \"\"\n        });\n\n        _this2.setState({\n          formIPFS: \"\"\n        });\n      });\n    }\n  }, {\n    key: \"handleReceiveIPFS\",\n    value: function handleReceiveIPFS(event) {\n      event.preventDefault();\n      var contract = this.state.contract;\n      var account = this.state.accounts[0];\n      contract.checkInbox({\n        from: account\n      });\n    }\n  }, {\n    key: \"render\",\n    //onIPFSSubmit\n    // ABOVE ADDED\n    value: function render() {\n      if (!this.state.web3) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165\n          },\n          __self: this\n        }, \"Loading Web3, accounts, and contract...\");\n      }\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, \"Invest-y-gative\"), React.createElement(\"p\", {\n        align: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, \"We value:\", React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, \"Editorial Transparency\"), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, \"Accuracy and Accountability\"), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, \"Source Protection\"))), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, \"Invest-y-gative leverages Web3 blockchain technology to drive investigative journalism, based on the methodology of scientific journalism, in the public interest.\")), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, \" 1. Upload your source material to IPFS\"), React.createElement(\"form\", {\n        id: \"ipfs-hash-form\",\n        className: \"scep-form\",\n        onSubmit: this.onIPFSSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"file\",\n        onChange: this.captureFile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, \" Upload \")), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, \" Your IPFS source hash is: \", this.state.ipfsHash), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, \" 2. Notify Invest-y-gative Editors of your source material\"), React.createElement(\"form\", {\n        id: \"new-notification-form\",\n        className: \"scep-form\",\n        onSubmit: this.handleSendIPFS,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, \"Editorial Address:\", React.createElement(\"input\", {\n        type: \"text\",\n        value: this.state.value,\n        onChange: this.handleChangeAddress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, \"IPFS Address:\", React.createElement(\"input\", {\n        type: \"text\",\n        value: this.state.value,\n        onChange: this.handleChangeIPFS,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"Submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      })), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, \" 3. Check for a reply from  Invest-y-gative\"), React.createElement(\"button\", {\n        type: \"submit\",\n        onClick: this.handleReceiveIPFS,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, \"Receive IPFS\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, this.state.receivedIPFS), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, \" 4. Receive a Transaction Receipt for your Source Material\"), React.createElement(\"button\", {\n        type: \"submit\",\n        onSubmit: this.onIPFSSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, \"Get Transaction Receipt \"), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, \"IPFS source material Hash # stored on Ethereum\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, this.state.ipfsHash), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, \"Ethereum Contract Address\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, this.state.ethAddress), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, \"Tx Hash # \"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, this.state.transactionHash), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, \"Block Number # \"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, this.state.blockNumber), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, \"Gas Used\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, this.state.gasUsed));\n    } //render\n\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/shevek/Documents/blockchain/Invest-y-gative/client/src/App.js"],"names":["React","Component","NotaryContract","getWeb3","ipfs","storehash","App","props","componentDidMount","web3","eth","getAccounts","accounts","net","getId","networkId","deployedNetwork","networks","instance","Contract","abi","address","setState","contract","runExample","alert","console","log","captureFile","event","stopPropagation","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","convertToBuffer","Buffer","from","result","buffer","onClick","blockNumber","gasUsed","getTransactionReceipt","state","transactionHash","err","txReceipt","onIPFSSubmit","add","ipfsHash","hash","methods","setHash","send","error","receivedIPFS","formIPFS","formAddress","ethAddress","handleChangeAddress","bind","handleChangeIPFS","handleSendIPFS","handleReceiveIPFS","value","account","document","getElementById","reset","showNotification","sendIPFS","then","checkInbox"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport NotaryContract from \"./contracts/SourceMaterial.json\";\nimport getWeb3 from \"./utils/getWeb3\";\nimport ipfs from \"./ipfs\";\nimport storehash from \"./storehash\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n      this.state = {\n      ipfsHash: null,\n      web3: null,\n      accounts: null,\n      contract: null,\n      receivedIPFS: \"\",\n      buffer: \"\",\n      formIPFS: \"\",\n      formAddress: \"\",\n      ethAddress: \"\",\n      blockNumber: \"\",\n      gasUsed: \"\",\n      txReceipt: \"\"\n    };\n\n    this.handleChangeAddress = this.handleChangeAddress.bind(this);\n    this.handleChangeIPFS = this.handleChangeIPFS.bind(this);\n    this.handleSendIPFS = this.handleSendIPFS.bind(this);\n    this.handleReceiveIPFS = this.handleReceiveIPFS.bind(this);\n    }\n\n  componentDidMount = async () => {\n    try {\n\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n    // Get accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = NotaryContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        NotaryContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runExample);\n\n       } catch (error) {\n         // Catch any errors for any of the above operations.\n         alert(\n           `Failed to load web3, accounts, or contract. Check console for details.`\n         );\n         console.log(error);\n       }\n     };\n\n     // BELOW ADDED\n\n     handleChangeAddress(event){\n       this.setState({formAddress: event.target.value});\n     }\n\n     handleChangeIPFS(event){\n       this.setState({formIPFS: event.target.value});\n     }\n\n     handleSendIPFS(event){\n       event.preventDefault();\n       const contract = this.state.contract\n       const account = this.state.accounts[0]\n\n       document.getElementById('new-notification-form').reset()\n       this.setState({showNotification: true});\n       contract.sendIPFS(this.state.formAddress, this.state.formIPFS, {from: account})\n         .then(result => {\n           this.setState({formAddress: \"\"});\n           this.setState({formIPFS: \"\"});\n         })\n     }\n\n     handleReceiveIPFS(event){\n       event.preventDefault();\n       const contract = this.state.contract\n       const account = this.state.accounts[0]\n       contract.checkInbox({from: account})\n     };\n\n     captureFile = (event) => {\n       event.stopPropagation()\n       event.preventDefault()\n       const file = event.target.files[0]\n       let reader = new window.FileReader()\n       reader.readAsArrayBuffer(file)\n       reader.onloadend = () => this.convertToBuffer(reader)\n     };\n\n     convertToBuffer = async(reader) => {\n       //file is converted to a buffer for upload to IPFS\n         const buffer = await Buffer.from(reader.result);\n       //set this buffer -using es6 syntax\n         this.setState({buffer});\n     };\n\n     //Transaction receipt\n     onClick = async () => {\n\n       const web3 = await getWeb3();\n\n     try {\n         this.setState({blockNumber:\"waiting..\"});\n         this.setState({gasUsed:\"waiting...\"});\n\n         // get Transaction Receipt in console on click.\n         // See: https://web3js.readthedocs.io/en/1.0/web3-eth.html#gettransactionreceipt\n         await web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt)=>{\n           console.log(err,txReceipt);\n           this.setState({txReceipt});\n         }); //await for getTransactionReceipt\n\n         await this.setState({blockNumber: this.state.txReceipt.blockNumber});\n         await this.setState({gasUsed: this.state.txReceipt.gasUsed});\n       } //try\n     catch(error){\n         console.log(error);\n       } //catch\n   } //onClick\n\n     onIPFSSubmit = async (event) => {\n     event.preventDefault();\n     //save document to IPFS,return its hash#, and set hash# to state\n     //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add\n     await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n       console.log(err, ipfsHash);\n       //setState by setting ipfsHash to ipfsHash[0].hash\n       this.setState({ ipfsHash:ipfsHash[0].hash });\n     })\n\n       const web3 = await getWeb3();\n\n      //bring in user's metamask account address\n      const accounts = await web3.eth.getAccounts();\n\n      console.log('Sending from Metamask account: ' + accounts[0]);\n\n      // call Ethereum contract method \"setHash\" and .send IPFS hash to etheruem contract\n      //return the transaction hash from the ethereum contract\n      //see, this https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-send\n      storehash.methods.setHash(this.state.ipfsHash).send({\n       from: accounts[0]\n      }, (error, transactionHash) => {\n         console.log(transactionHash);\n         this.setState({transactionHash});\n         }); //storehash\n       }; //onIPFSSubmit\n\n     // ABOVE ADDED\n\n     render() {\n       if (!this.state.web3) {\n         return <div>Loading Web3, accounts, and contract...</div>;\n       }\n\n       return (\n         <div className=\"App\">\n         <header className=\"App-header\">\n         <h1>Invest-y-gative</h1>\n\n         <p align=\"center\">We value:\n         <ul>\n         <li>Editorial Transparency</li>\n         <li>Accuracy and Accountability</li>\n         <li>Source Protection</li>\n         </ul>\n         </p>\n\n         <p>Invest-y-gative leverages Web3 blockchain technology to drive investigative journalism, based on the methodology of scientific journalism, in the public interest.</p>\n\n       </header>\n         <h2> 1. Upload your source material to IPFS</h2>\n           <form id=\"ipfs-hash-form\" className=\"scep-form\" onSubmit={this.onIPFSSubmit}>\n             <input type=\"file\" onChange={this.captureFile} />\n             <button type=\"submit\"> Upload </button>\n           </form>\n           <p> Your IPFS source hash is: {this.state.ipfsHash}</p>\n         <h2> 2. Notify Invest-y-gative Editors of your source material</h2>\n           <form id=\"new-notification-form\" className=\"scep-form\" onSubmit={this.handleSendIPFS}>\n             <label>\n               Editorial Address:\n               <input type=\"text\" value={this.state.value} onChange={this.handleChangeAddress} />\n             </label>\n             <label>\n               IPFS Address:\n               <input type=\"text\" value={this.state.value} onChange={this.handleChangeIPFS} />\n             </label>\n             <input type=\"submit\" value=\"Submit\" />\n           </form>\n         <h2> 3. Check for a reply from  Invest-y-gative</h2>\n           <button type=\"submit\" onClick={this.handleReceiveIPFS}>Receive IPFS</button>\n           <div>{this.state.receivedIPFS}</div>\n         <h2> 4. Receive a Transaction Receipt for your Source Material</h2>\n               <button type=\"submit\" onSubmit={this.onIPFSSubmit}>Get Transaction Receipt </button>\n\n                        <h2>IPFS source material Hash # stored on Ethereum</h2>\n                         <div>{this.state.ipfsHash}</div>\n                         <h2>Ethereum Contract Address</h2>\n                         <div>{this.state.ethAddress}</div>\n                         <h2>Tx Hash # </h2>\n                         <div>{this.state.transactionHash}</div>\n                         <h2>Block Number # </h2>\n                         <div>{this.state.blockNumber}</div>\n                       <h2>Gas Used</h2>\n                         <div>{this.state.gasUsed}</div>\n        </div>\n         );\n       } //render\n   }\nexport default App;\n"]},"metadata":{},"sourceType":"module"}